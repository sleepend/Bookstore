package ym.nemo233.bookstore.sqlite;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARSE_RULE_STEP".
*/
public class ParseRuleStepDao extends AbstractDao<ParseRuleStep, Long> {

    public static final String TABLENAME = "PARSE_RULE_STEP";

    /**
     * Properties of entity ParseRuleStep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property BsId = new Property(2, Long.class, "bsId", false, "BS_ID");
        public final static Property Step = new Property(3, Integer.class, "step", false, "STEP");
        public final static Property Action = new Property(4, Integer.class, "action", false, "ACTION");
        public final static Property Key = new Property(5, String.class, "key", false, "KEY");
    }

    private Query<ParseRuleStep> booksSite_ParseRuleStepListQuery;

    public ParseRuleStepDao(DaoConfig config) {
        super(config);
    }
    
    public ParseRuleStepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARSE_RULE_STEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"BS_ID\" INTEGER NOT NULL ," + // 2: bsId
                "\"STEP\" INTEGER," + // 3: step
                "\"ACTION\" INTEGER," + // 4: action
                "\"KEY\" TEXT);"); // 5: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARSE_RULE_STEP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParseRuleStep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
        stmt.bindLong(3, entity.getBsId());
 
        Integer step = entity.getStep();
        if (step != null) {
            stmt.bindLong(4, step);
        }
 
        Integer action = entity.getAction();
        if (action != null) {
            stmt.bindLong(5, action);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(6, key);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParseRuleStep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
        stmt.bindLong(3, entity.getBsId());
 
        Integer step = entity.getStep();
        if (step != null) {
            stmt.bindLong(4, step);
        }
 
        Integer action = entity.getAction();
        if (action != null) {
            stmt.bindLong(5, action);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(6, key);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ParseRuleStep readEntity(Cursor cursor, int offset) {
        ParseRuleStep entity = new ParseRuleStep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.getLong(offset + 2), // bsId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // step
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // action
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParseRuleStep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBsId(cursor.getLong(offset + 2));
        entity.setStep(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAction(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ParseRuleStep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ParseRuleStep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParseRuleStep entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "parseRuleStepList" to-many relationship of BooksSite. */
    public List<ParseRuleStep> _queryBooksSite_ParseRuleStepList(Long bsId) {
        synchronized (this) {
            if (booksSite_ParseRuleStepListQuery == null) {
                QueryBuilder<ParseRuleStep> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BsId.eq(null));
                booksSite_ParseRuleStepListQuery = queryBuilder.build();
            }
        }
        Query<ParseRuleStep> query = booksSite_ParseRuleStepListQuery.forCurrentThread();
        query.setParameter(0, bsId);
        return query.list();
    }

}
