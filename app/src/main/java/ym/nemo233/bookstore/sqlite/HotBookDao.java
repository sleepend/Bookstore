package ym.nemo233.bookstore.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOT_BOOK".
*/
public class HotBookDao extends AbstractDao<HotBook, Long> {

    public static final String TABLENAME = "HOT_BOOK";

    /**
     * Properties of entity HotBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SiteTag = new Property(1, String.class, "siteTag", false, "SITE_TAG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Auth = new Property(3, String.class, "auth", false, "AUTH");
        public final static Property ImgUrl = new Property(4, String.class, "imgUrl", false, "IMG_URL");
        public final static Property SourceUrl = new Property(5, String.class, "sourceUrl", false, "SOURCE_URL");
        public final static Property Newest = new Property(6, String.class, "newest", false, "NEWEST");
        public final static Property Stamp = new Property(7, Long.class, "stamp", false, "STAMP");
    }


    public HotBookDao(DaoConfig config) {
        super(config);
    }
    
    public HotBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOT_BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SITE_TAG\" TEXT," + // 1: siteTag
                "\"NAME\" TEXT," + // 2: name
                "\"AUTH\" TEXT," + // 3: auth
                "\"IMG_URL\" TEXT," + // 4: imgUrl
                "\"SOURCE_URL\" TEXT," + // 5: sourceUrl
                "\"NEWEST\" TEXT," + // 6: newest
                "\"STAMP\" INTEGER);"); // 7: stamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOT_BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HotBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String siteTag = entity.getSiteTag();
        if (siteTag != null) {
            stmt.bindString(2, siteTag);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String auth = entity.getAuth();
        if (auth != null) {
            stmt.bindString(4, auth);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(6, sourceUrl);
        }
 
        String newest = entity.getNewest();
        if (newest != null) {
            stmt.bindString(7, newest);
        }
 
        Long stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindLong(8, stamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HotBook entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String siteTag = entity.getSiteTag();
        if (siteTag != null) {
            stmt.bindString(2, siteTag);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String auth = entity.getAuth();
        if (auth != null) {
            stmt.bindString(4, auth);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(6, sourceUrl);
        }
 
        String newest = entity.getNewest();
        if (newest != null) {
            stmt.bindString(7, newest);
        }
 
        Long stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindLong(8, stamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HotBook readEntity(Cursor cursor, int offset) {
        HotBook entity = new HotBook( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // siteTag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // auth
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sourceUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // newest
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // stamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HotBook entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSiteTag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuth(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSourceUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNewest(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStamp(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HotBook entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HotBook entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HotBook entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
