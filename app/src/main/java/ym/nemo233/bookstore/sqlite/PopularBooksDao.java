package ym.nemo233.bookstore.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POPULAR_BOOKS".
*/
public class PopularBooksDao extends AbstractDao<PopularBooks, Long> {

    public static final String TABLENAME = "POPULAR_BOOKS";

    /**
     * Properties of entity PopularBooks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Website = new Property(1, String.class, "website", false, "WEBSITE");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property TypeName = new Property(3, String.class, "typeName", false, "TYPE_NAME");
        public final static Property BaseUrl = new Property(4, String.class, "baseUrl", false, "BASE_URL");
        public final static Property Specific = new Property(5, String.class, "specific", false, "SPECIFIC");
        public final static Property BookName = new Property(6, String.class, "bookName", false, "BOOK_NAME");
        public final static Property Auth = new Property(7, String.class, "auth", false, "AUTH");
        public final static Property Picture = new Property(8, String.class, "picture", false, "PICTURE");
        public final static Property BookUrl = new Property(9, String.class, "bookUrl", false, "BOOK_URL");
        public final static Property Instr = new Property(10, String.class, "instr", false, "INSTR");
    }


    public PopularBooksDao(DaoConfig config) {
        super(config);
    }
    
    public PopularBooksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POPULAR_BOOKS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WEBSITE\" TEXT," + // 1: website
                "\"TYPE\" INTEGER," + // 2: type
                "\"TYPE_NAME\" TEXT," + // 3: typeName
                "\"BASE_URL\" TEXT," + // 4: baseUrl
                "\"SPECIFIC\" TEXT," + // 5: specific
                "\"BOOK_NAME\" TEXT," + // 6: bookName
                "\"AUTH\" TEXT," + // 7: auth
                "\"PICTURE\" TEXT," + // 8: picture
                "\"BOOK_URL\" TEXT," + // 9: bookUrl
                "\"INSTR\" TEXT);"); // 10: instr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POPULAR_BOOKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PopularBooks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(2, website);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
 
        String baseUrl = entity.getBaseUrl();
        if (baseUrl != null) {
            stmt.bindString(5, baseUrl);
        }
 
        String specific = entity.getSpecific();
        if (specific != null) {
            stmt.bindString(6, specific);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(7, bookName);
        }
 
        String auth = entity.getAuth();
        if (auth != null) {
            stmt.bindString(8, auth);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(9, picture);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(10, bookUrl);
        }
 
        String instr = entity.getInstr();
        if (instr != null) {
            stmt.bindString(11, instr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PopularBooks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(2, website);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
 
        String baseUrl = entity.getBaseUrl();
        if (baseUrl != null) {
            stmt.bindString(5, baseUrl);
        }
 
        String specific = entity.getSpecific();
        if (specific != null) {
            stmt.bindString(6, specific);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(7, bookName);
        }
 
        String auth = entity.getAuth();
        if (auth != null) {
            stmt.bindString(8, auth);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(9, picture);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(10, bookUrl);
        }
 
        String instr = entity.getInstr();
        if (instr != null) {
            stmt.bindString(11, instr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PopularBooks readEntity(Cursor cursor, int offset) {
        PopularBooks entity = new PopularBooks( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // website
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // baseUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // specific
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bookName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // auth
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picture
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bookUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // instr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PopularBooks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWebsite(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBaseUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpecific(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBookName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuth(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPicture(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBookUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInstr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PopularBooks entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PopularBooks entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PopularBooks entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
