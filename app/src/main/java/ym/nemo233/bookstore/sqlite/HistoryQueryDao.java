package ym.nemo233.bookstore.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_QUERY".
*/
public class HistoryQueryDao extends AbstractDao<HistoryQuery, Long> {

    public static final String TABLENAME = "HISTORY_QUERY";

    /**
     * Properties of entity HistoryQuery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SearchKey = new Property(1, String.class, "searchKey", false, "SEARCH_KEY");
        public final static Property Site = new Property(2, String.class, "site", false, "SITE");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Sort = new Property(4, Integer.class, "sort", false, "SORT");
        public final static Property Stamp = new Property(5, Long.class, "stamp", false, "STAMP");
    }


    public HistoryQueryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryQueryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_QUERY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SEARCH_KEY\" TEXT," + // 1: searchKey
                "\"SITE\" TEXT," + // 2: site
                "\"URL\" TEXT," + // 3: url
                "\"SORT\" INTEGER," + // 4: sort
                "\"STAMP\" INTEGER);"); // 5: stamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_QUERY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryQuery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String searchKey = entity.getSearchKey();
        if (searchKey != null) {
            stmt.bindString(2, searchKey);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(3, site);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(5, sort);
        }
 
        Long stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindLong(6, stamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryQuery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String searchKey = entity.getSearchKey();
        if (searchKey != null) {
            stmt.bindString(2, searchKey);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(3, site);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(5, sort);
        }
 
        Long stamp = entity.getStamp();
        if (stamp != null) {
            stmt.bindLong(6, stamp);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryQuery readEntity(Cursor cursor, int offset) {
        HistoryQuery entity = new HistoryQuery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // searchKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // site
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sort
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // stamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryQuery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSearchKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSite(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStamp(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryQuery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryQuery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryQuery entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
