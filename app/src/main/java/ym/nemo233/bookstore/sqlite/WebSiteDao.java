package ym.nemo233.bookstore.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEB_SITE".
*/
public class WebSiteDao extends AbstractDao<WebSite, Long> {

    public static final String TABLENAME = "WEB_SITE";

    /**
     * Properties of entity WebSite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Decode = new Property(3, String.class, "decode", false, "DECODE");
        public final static Property DelayMill = new Property(4, Integer.class, "delayMill", false, "DELAY_MILL");
        public final static Property IsDefault = new Property(5, Integer.class, "isDefault", false, "IS_DEFAULT");
        public final static Property SearchUrl = new Property(6, String.class, "searchUrl", false, "SEARCH_URL");
        public final static Property Parent = new Property(7, Long.class, "parent", false, "PARENT");
    }


    public WebSiteDao(DaoConfig config) {
        super(config);
    }
    
    public WebSiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEB_SITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"URL\" TEXT," + // 2: url
                "\"DECODE\" TEXT," + // 3: decode
                "\"DELAY_MILL\" INTEGER," + // 4: delayMill
                "\"IS_DEFAULT\" INTEGER," + // 5: isDefault
                "\"SEARCH_URL\" TEXT," + // 6: searchUrl
                "\"PARENT\" INTEGER);"); // 7: parent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEB_SITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WebSite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String decode = entity.getDecode();
        if (decode != null) {
            stmt.bindString(4, decode);
        }
 
        Integer delayMill = entity.getDelayMill();
        if (delayMill != null) {
            stmt.bindLong(5, delayMill);
        }
 
        Integer isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(6, isDefault);
        }
 
        String searchUrl = entity.getSearchUrl();
        if (searchUrl != null) {
            stmt.bindString(7, searchUrl);
        }
 
        Long parent = entity.getParent();
        if (parent != null) {
            stmt.bindLong(8, parent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WebSite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String decode = entity.getDecode();
        if (decode != null) {
            stmt.bindString(4, decode);
        }
 
        Integer delayMill = entity.getDelayMill();
        if (delayMill != null) {
            stmt.bindLong(5, delayMill);
        }
 
        Integer isDefault = entity.getIsDefault();
        if (isDefault != null) {
            stmt.bindLong(6, isDefault);
        }
 
        String searchUrl = entity.getSearchUrl();
        if (searchUrl != null) {
            stmt.bindString(7, searchUrl);
        }
 
        Long parent = entity.getParent();
        if (parent != null) {
            stmt.bindLong(8, parent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WebSite readEntity(Cursor cursor, int offset) {
        WebSite entity = new WebSite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // decode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // delayMill
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isDefault
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // searchUrl
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // parent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WebSite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDecode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDelayMill(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsDefault(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSearchUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParent(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WebSite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WebSite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WebSite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
